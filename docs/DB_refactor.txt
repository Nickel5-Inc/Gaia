
# Database Refactor Plan
METHODOLOGIES:
 open an async DB session at the beginning of a request and close it after the request finishes. During that request, you may open and close one or more transactions (either implicitly via ORM operations or explicitly with a transaction context manager).
 
  ensure:

    Each request is isolated.
    Database resources are released promptly.
    Transactions do not remain open beyond the necessary scope.

 - async with self.transaction() as session: valid if it’s used as a short, clearly scoped transaction.
    It becomes bad practice when you treat one transaction as a broad “session” for lots of queries or across multiple operations that don’t all need to happen atomically.

 - Use transactions for atomic write operations
 - Use sessions for reads
 - Ensure proper scope for transactions
 - Avoid long-running transactions
 - Keep resource management clean

# What we have done
- Updated BaseDatabaseManager
- Updated ValidatorDatabaseManager
- main scoring
- soil task fully
- geo_task.py 

## Current Issues
1. Inconsistent session/transaction management
2. Direct engine access in ValidatorDatabaseManager
3. Redundant connection pool management
4. Missing context managers in many operations
5. Unclear timeout handling
6. Potential connection leaks

## Refactor Goals
1. Consistent transaction handling
2. Proper resource cleanup
3. Clear timeout management
4. Connection pool optimization
5. Better error handling and recovery

## Implementation Plan

### 1. Base Database Manager Updates

### 5. Implementation Order

1. Update BaseDatabaseManager
   - Add core context managers
   - Implement connection pooling
   - Add monitoring

2. Update ValidatorDatabaseManager
   - Remove redundant connection handling
   - Use base class context managers
   - Add validator-specific operations

3. Update Task Operations
   - Use proper transaction handling
   - Add timeout management
   - Implement batch processing

4. Add Monitoring
   - Implement pool monitoring
   - Add health checks
   - Track long-running queries

### 6. Testing Requirements

1. Connection Management
   - Verify connections are properly closed
   - Test pool overflow handling
   - Verify transaction rollback

2. Concurrent Operations
   - Test multiple simultaneous queries
   - Verify pool behavior under load
   - Check transaction isolation

3. Error Recovery
   - Test connection loss recovery
   - Verify transaction rollback
   - Check error propagation

### 7. Success Metrics

1. No connection leaks
2. Proper transaction isolation
3. Consistent error handling
4. Clear resource cleanup
5. Improved stability
6. Better monitoring
7. Reduced freezing incidents
