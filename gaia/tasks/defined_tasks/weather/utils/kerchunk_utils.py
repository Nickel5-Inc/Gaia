import fsspec
import kerchunk.hdf
import json
from typing import Dict, Any


def generate_kerchunk_json_from_local_file(
    local_netcdf_path: str, target_netcdf_url: str, inline_threshold: int = 300
) -> Dict[str, Any]:
    """
    Generates Kerchunk reference JSON data from a local NetCDF/HDF5 file.

    This function scans a local NetCDF file and creates a dictionary representing
    the Kerchunk JSON references. These references point to the target URL where
    the actual NetCDF data can be accessed by validators.

    Args:
        local_netcdf_path: The local filesystem path to the source NetCDF file.
        target_netcdf_url: The URL (e.g., 's3://...', 'http://...') or absolute path
                           where the NetCDF file will be accessible externally.
                           This URL is embedded in the references.
        inline_threshold: Maximum size in bytes for data chunks to be embedded
                          directly in the JSON. Larger chunks will be referenced
                          by their byte range in the target file. A higher value
                          can increase JSON size but might speed up loading for
                          small datasets. Defaults to 300.

    Returns:
        A dictionary containing the Kerchunk reference structure, ready to be
        serialized to JSON.

    Raises:
        FileNotFoundError: If the local_netcdf_path does not exist.
        Exception: If any error occurs during Kerchunk processing.
    """
    try:
        with fsspec.open(f"file://{local_netcdf_path}", mode="rb") as file_obj:
            h5chunks = kerchunk.hdf.SingleHdf5ToZarr(
                file_obj, target_netcdf_url, inline_threshold=inline_threshold
            )

            reference_dict = h5chunks.translate()
            return reference_dict

    except FileNotFoundError:
        print(f"Error: Local NetCDF file not found at {local_netcdf_path}")
        raise
    except Exception as e:
        print(f"Error generating Kerchunk JSON for {local_netcdf_path}: {e}")
        raise


def save_kerchunk_json(reference_dict: Dict[str, Any], output_json_path: str) -> None:
    """
    Saves the Kerchunk reference dictionary to a JSON file.

    Args:
        reference_dict: The dictionary generated by
                          generate_kerchunk_json_from_local_file.
        output_json_path: The local filesystem path where the JSON file
                           should be saved.

    Raises:
        Exception: If any error occurs during file writing or JSON serialization.
    """
    try:
        with fsspec.open(output_json_path, mode="wb") as f:
            f.write(json.dumps(reference_dict).encode("utf-8"))
        print(f"Kerchunk JSON saved successfully to {output_json_path}")
    except Exception as e:
        print(f"Error saving Kerchunk JSON to {output_json_path}: {e}")
        raise
