"""add_miner_performance_stats_table

Revision ID: 7cc0a0cb963c
Revises: 911b2e3e140e
Create Date: 2025-07-21 17:26:57.467841

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "7cc0a0cb963c"
down_revision: Union[str, None] = "911b2e3e140e"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "miner_performance_stats",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("miner_uid", sa.Text(), nullable=False, comment="Miner's UID"),
        sa.Column("miner_hotkey", sa.Text(), nullable=False, comment="Miner's hotkey"),
        sa.Column(
            "period_start",
            postgresql.TIMESTAMP(timezone=True),
            nullable=False,
            comment="Start of the performance period",
        ),
        sa.Column(
            "period_end",
            postgresql.TIMESTAMP(timezone=True),
            nullable=False,
            comment="End of the performance period",
        ),
        sa.Column(
            "period_type",
            sa.VARCHAR(length=20),
            nullable=False,
            comment="Type of period: daily, weekly, monthly, all_time",
        ),
        sa.Column(
            "total_tasks_attempted",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
            comment="Total tasks attempted across all types",
        ),
        sa.Column(
            "total_tasks_completed",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
            comment="Total tasks successfully completed",
        ),
        sa.Column(
            "total_tasks_scored",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
            comment="Total tasks that received scores",
        ),
        sa.Column(
            "overall_success_rate",
            sa.Float(),
            nullable=True,
            comment="Completion rate (completed/attempted)",
        ),
        sa.Column(
            "overall_avg_score",
            sa.Float(),
            nullable=True,
            comment="Weighted average score across all task types",
        ),
        sa.Column(
            "overall_rank",
            sa.Integer(),
            nullable=True,
            comment="Overall rank among all miners for this period",
        ),
        sa.Column(
            "weather_tasks_attempted",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
        ),
        sa.Column(
            "weather_tasks_completed",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
        ),
        sa.Column(
            "weather_tasks_scored",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
        ),
        sa.Column(
            "weather_avg_score",
            sa.Float(),
            nullable=True,
            comment="Average weather forecast score",
        ),
        sa.Column("weather_success_rate", sa.Float(), nullable=True),
        sa.Column(
            "weather_rank",
            sa.Integer(),
            nullable=True,
            comment="Rank in weather forecasting",
        ),
        sa.Column(
            "weather_best_score",
            sa.Float(),
            nullable=True,
            comment="Best weather score in period",
        ),
        sa.Column(
            "weather_latest_score",
            sa.Float(),
            nullable=True,
            comment="Most recent weather score",
        ),
        sa.Column(
            "soil_moisture_tasks_attempted",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
        ),
        sa.Column(
            "soil_moisture_tasks_completed",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
        ),
        sa.Column(
            "soil_moisture_tasks_scored",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
        ),
        sa.Column(
            "soil_moisture_avg_score",
            sa.Float(),
            nullable=True,
            comment="Average combined soil moisture score",
        ),
        sa.Column("soil_moisture_success_rate", sa.Float(), nullable=True),
        sa.Column("soil_moisture_rank", sa.Integer(), nullable=True),
        sa.Column(
            "soil_moisture_surface_rmse_avg",
            sa.Float(),
            nullable=True,
            comment="Average surface RMSE",
        ),
        sa.Column(
            "soil_moisture_rootzone_rmse_avg",
            sa.Float(),
            nullable=True,
            comment="Average rootzone RMSE",
        ),
        sa.Column("soil_moisture_best_score", sa.Float(), nullable=True),
        sa.Column("soil_moisture_latest_score", sa.Float(), nullable=True),
        sa.Column(
            "geomagnetic_tasks_attempted",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
        ),
        sa.Column(
            "geomagnetic_tasks_completed",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
        ),
        sa.Column(
            "geomagnetic_tasks_scored",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
        ),
        sa.Column(
            "geomagnetic_avg_score",
            sa.Float(),
            nullable=True,
            comment="Average geomagnetic prediction score",
        ),
        sa.Column("geomagnetic_success_rate", sa.Float(), nullable=True),
        sa.Column("geomagnetic_rank", sa.Integer(), nullable=True),
        sa.Column("geomagnetic_best_score", sa.Float(), nullable=True),
        sa.Column("geomagnetic_latest_score", sa.Float(), nullable=True),
        sa.Column(
            "geomagnetic_avg_error",
            sa.Float(),
            nullable=True,
            comment="Average prediction error magnitude",
        ),
        sa.Column(
            "performance_trend",
            sa.VARCHAR(length=20),
            nullable=True,
            comment="improving, declining, stable, insufficient_data",
        ),
        sa.Column(
            "trend_confidence",
            sa.Float(),
            nullable=True,
            comment="Confidence in trend assessment (0-1)",
        ),
        sa.Column(
            "last_active_time",
            postgresql.TIMESTAMP(timezone=True),
            nullable=True,
            comment="Last time miner submitted a task",
        ),
        sa.Column(
            "consecutive_failures",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
            comment="Number of consecutive failed tasks",
        ),
        sa.Column(
            "uptime_percentage",
            sa.Float(),
            nullable=True,
            comment="Percentage of time miner was responsive",
        ),
        sa.Column(
            "detailed_metrics",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Additional detailed metrics and breakdowns",
        ),
        sa.Column(
            "score_distribution",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Score percentiles and distribution stats",
        ),
        sa.Column(
            "calculated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "miner_uid",
            "period_start",
            "period_end",
            "period_type",
            name="uq_mps_miner_period",
        ),
        comment="Comprehensive miner performance statistics aggregated across all task types for visualization and analysis.",
    )
    with op.batch_alter_table("miner_performance_stats", schema=None) as batch_op:
        batch_op.create_index(
            "idx_mps_calculated_at",
            [sa.literal_column("calculated_at DESC")],
            unique=False,
        )
        batch_op.create_index(
            "idx_mps_geomagnetic_rank",
            ["geomagnetic_rank", "period_type"],
            unique=False,
        )
        batch_op.create_index(
            "idx_mps_last_active",
            [sa.literal_column("last_active_time DESC")],
            unique=False,
        )
        batch_op.create_index("idx_mps_miner_hotkey", ["miner_hotkey"], unique=False)
        batch_op.create_index("idx_mps_miner_uid", ["miner_uid"], unique=False)
        batch_op.create_index(
            "idx_mps_overall_rank", ["overall_rank", "period_type"], unique=False
        )
        batch_op.create_index(
            "idx_mps_overall_score",
            [sa.literal_column("overall_avg_score DESC"), "period_type"],
            unique=False,
        )
        batch_op.create_index(
            "idx_mps_period_type_start",
            ["period_type", sa.literal_column("period_start DESC")],
            unique=False,
        )
        batch_op.create_index(
            "idx_mps_soil_rank", ["soil_moisture_rank", "period_type"], unique=False
        )
        batch_op.create_index(
            "idx_mps_weather_rank", ["weather_rank", "period_type"], unique=False
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("miner_performance_stats", schema=None) as batch_op:
        batch_op.drop_index("idx_mps_weather_rank")
        batch_op.drop_index("idx_mps_soil_rank")
        batch_op.drop_index("idx_mps_period_type_start")
        batch_op.drop_index("idx_mps_overall_score")
        batch_op.drop_index("idx_mps_overall_rank")
        batch_op.drop_index("idx_mps_miner_uid")
        batch_op.drop_index("idx_mps_miner_hotkey")
        batch_op.drop_index("idx_mps_last_active")
        batch_op.drop_index("idx_mps_geomagnetic_rank")
        batch_op.drop_index("idx_mps_calculated_at")

    op.drop_table("miner_performance_stats")
    # ### end Alembic commands ###
