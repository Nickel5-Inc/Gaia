"""add retry columns to weather_miner_responses

Revision ID: 911b2e3e140e
Revises: 7819e940673d
Create Date: 2025-07-02 16:08:15.923642

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "911b2e3e140e"
down_revision: Union[str, None] = "7819e940673d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("weather_miner_responses", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "retry_count",
                sa.Integer(),
                server_default=sa.text("0"),
                nullable=True,
                comment="Number of retry attempts for this miner response",
            )
        )
        batch_op.add_column(
            sa.Column(
                "next_retry_time",
                postgresql.TIMESTAMP(timezone=True),
                nullable=True,
                comment="UTC timestamp when the validator should attempt the next retry",
            )
        )
        batch_op.create_index(
            "idx_wmr_next_retry_time", ["next_retry_time"], unique=False
        )
        batch_op.create_index("idx_wmr_retry_count", ["retry_count"], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("weather_miner_responses", schema=None) as batch_op:
        batch_op.drop_index("idx_wmr_retry_count")
        batch_op.drop_index("idx_wmr_next_retry_time")
        batch_op.drop_column("next_retry_time")
        batch_op.drop_column("retry_count")

    # ### end Alembic commands ###
