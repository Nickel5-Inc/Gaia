"""Add normalized miner performance tables

Revision ID: e95a106a8531
Revises: 67d43e63a03b
Create Date: 2025-07-23 18:53:08.135253

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e95a106a8531'
down_revision: Union[str, None] = '67d43e63a03b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('miner_performance_summary',
    sa.Column('miner_uid', sa.Text(), nullable=False, comment="Miner's UID"),
    sa.Column('period_start', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='Start of the performance period'),
    sa.Column('period_end', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='End of the performance period'),
    sa.Column('period_type', sa.VARCHAR(length=20), nullable=False, comment='Type of period: daily, weekly, monthly, all_time'),
    sa.Column('miner_hotkey', sa.Text(), nullable=False, comment="Miner's hotkey"),
    sa.Column('calculated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('total_tasks_attempted', sa.Integer(), server_default=sa.text('0'), nullable=False, comment='Total tasks attempted across all types'),
    sa.Column('total_tasks_completed', sa.Integer(), server_default=sa.text('0'), nullable=False, comment='Total tasks successfully completed'),
    sa.Column('overall_success_rate', sa.Float(), nullable=True, comment='Completion rate (completed/attempted)'),
    sa.Column('overall_avg_score', sa.Float(), nullable=True, comment='Weighted average score across all task types'),
    sa.Column('overall_rank', sa.Integer(), nullable=True, comment='Overall rank among all miners for this period'),
    sa.Column('performance_trend', sa.VARCHAR(length=20), nullable=True, comment='improving, declining, stable, insufficient_data'),
    sa.Column('trend_confidence', sa.Float(), nullable=True, comment='Confidence in trend assessment (0-1)'),
    sa.Column('last_active_time', postgresql.TIMESTAMP(timezone=True), nullable=True, comment='Last time miner submitted a task'),
    sa.Column('consecutive_failures', sa.Integer(), server_default=sa.text('0'), nullable=False, comment='Number of consecutive failed tasks'),
    sa.Column('uptime_percentage', sa.Float(), nullable=True, comment='Percentage of time miner was responsive'),
    sa.PrimaryKeyConstraint('miner_uid', 'period_start', 'period_end', 'period_type'),
    comment='Core miner performance summary - aggregated metrics across all task types'
    )
    with op.batch_alter_table('miner_performance_summary', schema=None) as batch_op:
        batch_op.create_index('idx_mps_summary_calculated_at', [sa.literal_column('calculated_at DESC')], unique=False)
        batch_op.create_index('idx_mps_summary_miner_period', ['miner_uid', 'period_type', sa.literal_column('period_start DESC')], unique=False)
        batch_op.create_index('idx_mps_summary_overall_rank', ['overall_rank', 'period_type'], unique=False)

    op.create_table('miner_consensus_data',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Serial ID for the consensus data entry'),
    sa.Column('miner_uid', sa.Text(), nullable=False, comment="Miner's UID"),
    sa.Column('period_start', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='Start of the performance period'),
    sa.Column('period_end', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='End of the performance period'),
    sa.Column('period_type', sa.VARCHAR(length=20), nullable=False, comment='Type of period: daily, weekly, monthly, all_time'),
    sa.Column('incentive', sa.Float(), nullable=True, comment='Final incentive value from chain consensus'),
    sa.Column('consensus_rank', sa.Integer(), nullable=True, comment='Miner rank based on final incentive values'),
    sa.Column('weight_submission_block', sa.BigInteger(), nullable=True, comment='Block number when weights were submitted'),
    sa.Column('consensus_block', sa.BigInteger(), nullable=True, comment='Block number when consensus was calculated'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['miner_uid', 'period_start', 'period_end', 'period_type'], ['miner_performance_summary.miner_uid', 'miner_performance_summary.period_start', 'miner_performance_summary.period_end', 'miner_performance_summary.period_type'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('miner_uid', 'period_start', 'period_end', 'period_type', name='uq_mcd_miner_period'),
    comment='Chain consensus integration data - separated from core performance metrics'
    )
    with op.batch_alter_table('miner_consensus_data', schema=None) as batch_op:
        batch_op.create_index('idx_mcd_consensus_rank', ['consensus_rank', 'period_type'], unique=False)
        batch_op.create_index('idx_mcd_incentive', [sa.literal_column('incentive DESC')], unique=False, postgresql_where=sa.text('incentive IS NOT NULL'))

    op.create_table('miner_weight_calculations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Serial ID for the weight calculation entry'),
    sa.Column('miner_uid', sa.Text(), nullable=False, comment="Miner's UID"),
    sa.Column('period_start', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='Start of the performance period'),
    sa.Column('period_end', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='End of the performance period'),
    sa.Column('period_type', sa.VARCHAR(length=20), nullable=False, comment='Type of period: daily, weekly, monthly, all_time'),
    sa.Column('submitted_weight', sa.Float(), nullable=True, comment='Final weight submitted to chain by this validator'),
    sa.Column('raw_calculated_weight', sa.Float(), nullable=True, comment='Pre-normalization weight from scoring algorithm'),
    sa.Column('excellence_weight', sa.Float(), nullable=True, comment='Weight from excellence pathway calculation'),
    sa.Column('diversity_weight', sa.Float(), nullable=True, comment='Weight from diversity pathway calculation'),
    sa.Column('scoring_pathway', sa.VARCHAR(length=20), nullable=True, comment='Which pathway was selected: excellence, diversity, or none'),
    sa.Column('pathway_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Detailed breakdown of pathway calculation'),
    sa.Column('multi_task_bonus', sa.Float(), nullable=True, comment='Bonus for performing multiple tasks well'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.CheckConstraint("scoring_pathway IN ('excellence', 'diversity', 'none') OR scoring_pathway IS NULL", name='chk_mwc_scoring_pathway'),
    sa.ForeignKeyConstraint(['miner_uid', 'period_start', 'period_end', 'period_type'], ['miner_performance_summary.miner_uid', 'miner_performance_summary.period_start', 'miner_performance_summary.period_end', 'miner_performance_summary.period_type'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('miner_uid', 'period_start', 'period_end', 'period_type', name='uq_mwc_miner_period'),
    comment='Weight calculation and pathway tracking - separated from core performance metrics'
    )
    with op.batch_alter_table('miner_weight_calculations', schema=None) as batch_op:
        batch_op.create_index('idx_mwc_pathway', ['scoring_pathway', sa.literal_column('submitted_weight DESC')], unique=False)
        batch_op.create_index('idx_mwc_weight_submitted', [sa.literal_column('submitted_weight DESC')], unique=False, postgresql_where=sa.text('submitted_weight IS NOT NULL'))

    op.create_table('task_performance_metrics',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Serial ID for the task performance entry'),
    sa.Column('miner_uid', sa.Text(), nullable=False, comment="Miner's UID"),
    sa.Column('period_start', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='Start of the performance period'),
    sa.Column('period_end', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='End of the performance period'),
    sa.Column('period_type', sa.VARCHAR(length=20), nullable=False, comment='Type of period: daily, weekly, monthly, all_time'),
    sa.Column('task_name', sa.VARCHAR(length=50), nullable=False, comment='Name of the task: weather, soil_moisture, geomagnetic'),
    sa.Column('tasks_attempted', sa.Integer(), server_default=sa.text('0'), nullable=False, comment='Tasks attempted for this task type'),
    sa.Column('tasks_completed', sa.Integer(), server_default=sa.text('0'), nullable=False, comment='Tasks successfully completed'),
    sa.Column('tasks_scored', sa.Integer(), server_default=sa.text('0'), nullable=False, comment='Tasks that received scores'),
    sa.Column('avg_score', sa.Float(), nullable=True, comment='Average score for this task type'),
    sa.Column('success_rate', sa.Float(), nullable=True, comment='Completion rate for this task type'),
    sa.Column('rank', sa.Integer(), nullable=True, comment='Rank among all miners for this task type'),
    sa.Column('best_score', sa.Float(), nullable=True, comment='Best score achieved in this period'),
    sa.Column('latest_score', sa.Float(), nullable=True, comment='Most recent score achieved'),
    sa.Column('percentile_rank', sa.Float(), nullable=True, comment='Percentile rank for this task (0-100)'),
    sa.Column('weight_contribution', sa.Float(), nullable=True, comment='Contribution of this task to final weight'),
    sa.Column('task_specific_metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Task-unique fields (e.g., RMSE for soil, prediction_error for geo)'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.CheckConstraint("task_name IN ('weather', 'soil_moisture', 'geomagnetic')", name='chk_tpm_task_name'),
    sa.ForeignKeyConstraint(['miner_uid', 'period_start', 'period_end', 'period_type'], ['miner_performance_summary.miner_uid', 'miner_performance_summary.period_start', 'miner_performance_summary.period_end', 'miner_performance_summary.period_type'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('miner_uid', 'period_start', 'period_end', 'period_type', 'task_name', name='uq_tpm_miner_period_task'),
    comment='Normalized task-specific performance metrics - one row per miner per period per task type'
    )
    with op.batch_alter_table('task_performance_metrics', schema=None) as batch_op:
        batch_op.create_index('idx_tpm_miner_task', ['miner_uid', 'task_name'], unique=False)
        batch_op.create_index('idx_tpm_task_rank', ['task_name', 'rank', 'period_type'], unique=False)
        batch_op.create_index('idx_tpm_task_score', ['task_name', sa.literal_column('avg_score DESC'), 'period_type'], unique=False)

    op.create_table('weather_performance_phases',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Serial ID for the weather phase performance entry'),
    sa.Column('miner_uid', sa.Text(), nullable=False, comment="Miner's UID"),
    sa.Column('period_start', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='Start of the performance period'),
    sa.Column('period_end', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='End of the performance period'),
    sa.Column('period_type', sa.VARCHAR(length=20), nullable=False, comment='Type of period: daily, weekly, monthly, all_time'),
    sa.Column('phase_type', sa.VARCHAR(length=20), nullable=False, comment='Scoring phase: initial or final'),
    sa.Column('runs_with_phase_scores', sa.Integer(), server_default=sa.text('0'), nullable=False, comment='Number of runs with this phase type scored'),
    sa.Column('avg_phase_score', sa.Float(), nullable=True, comment='Average score for this phase'),
    sa.Column('best_phase_score', sa.Float(), nullable=True, comment='Best score for this phase'),
    sa.Column('latest_phase_score', sa.Float(), nullable=True, comment='Most recent score for this phase'),
    sa.Column('phase_rank', sa.Integer(), nullable=True, comment='Rank among all miners for this phase'),
    sa.Column('avg_scoring_lag_days', sa.Float(), nullable=True, comment='Average days between run initiation and phase score calculation'),
    sa.Column('data_availability_summary', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Summary of data availability for this phase'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.CheckConstraint("phase_type IN ('initial', 'final')", name='chk_wpp_phase_type'),
    sa.ForeignKeyConstraint(['miner_uid', 'period_start', 'period_end', 'period_type'], ['miner_performance_summary.miner_uid', 'miner_performance_summary.period_start', 'miner_performance_summary.period_end', 'miner_performance_summary.period_type'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('miner_uid', 'period_start', 'period_end', 'period_type', 'phase_type', name='uq_wpp_miner_period_phase'),
    comment='Weather-specific phase performance metrics - tracks initial vs final scoring performance separately'
    )
    with op.batch_alter_table('weather_performance_phases', schema=None) as batch_op:
        batch_op.create_index('idx_wpp_miner_phase', ['miner_uid', 'phase_type'], unique=False)
        batch_op.create_index('idx_wpp_phase_rank', ['phase_type', 'phase_rank', 'period_type'], unique=False)
        batch_op.create_index('idx_wpp_scoring_lag', ['avg_scoring_lag_days'], unique=False, postgresql_where=sa.text('avg_scoring_lag_days IS NOT NULL'))

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('weather_performance_phases', schema=None) as batch_op:
        batch_op.drop_index('idx_wpp_scoring_lag', postgresql_where=sa.text('avg_scoring_lag_days IS NOT NULL'))
        batch_op.drop_index('idx_wpp_phase_rank')
        batch_op.drop_index('idx_wpp_miner_phase')

    op.drop_table('weather_performance_phases')
    with op.batch_alter_table('task_performance_metrics', schema=None) as batch_op:
        batch_op.drop_index('idx_tpm_task_score')
        batch_op.drop_index('idx_tpm_task_rank')
        batch_op.drop_index('idx_tpm_miner_task')

    op.drop_table('task_performance_metrics')
    with op.batch_alter_table('miner_weight_calculations', schema=None) as batch_op:
        batch_op.drop_index('idx_mwc_weight_submitted', postgresql_where=sa.text('submitted_weight IS NOT NULL'))
        batch_op.drop_index('idx_mwc_pathway')

    op.drop_table('miner_weight_calculations')
    with op.batch_alter_table('miner_consensus_data', schema=None) as batch_op:
        batch_op.drop_index('idx_mcd_incentive', postgresql_where=sa.text('incentive IS NOT NULL'))
        batch_op.drop_index('idx_mcd_consensus_rank')

    op.drop_table('miner_consensus_data')
    with op.batch_alter_table('miner_performance_summary', schema=None) as batch_op:
        batch_op.drop_index('idx_mps_summary_overall_rank')
        batch_op.drop_index('idx_mps_summary_miner_period')
        batch_op.drop_index('idx_mps_summary_calculated_at')

    op.drop_table('miner_performance_summary')
    # ### end Alembic commands ###
