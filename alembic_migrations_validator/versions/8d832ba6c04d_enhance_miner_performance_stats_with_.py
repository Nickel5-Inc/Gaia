"""enhance_miner_performance_stats_with_weight_tracking

Revision ID: 8d832ba6c04d
Revises: 7cc0a0cb963c
Create Date: 2025-07-22 16:29:36.931224

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "8d832ba6c04d"
down_revision: Union[str, None] = "7cc0a0cb963c"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("miner_performance_stats", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "submitted_weight",
                sa.Float(),
                nullable=True,
                comment="Final weight submitted to chain by this validator",
            )
        )
        batch_op.add_column(
            sa.Column(
                "raw_calculated_weight",
                sa.Float(),
                nullable=True,
                comment="Pre-normalization weight from scoring algorithm",
            )
        )
        batch_op.add_column(
            sa.Column(
                "excellence_weight",
                sa.Float(),
                nullable=True,
                comment="Weight from excellence pathway calculation",
            )
        )
        batch_op.add_column(
            sa.Column(
                "diversity_weight",
                sa.Float(),
                nullable=True,
                comment="Weight from diversity pathway calculation",
            )
        )
        batch_op.add_column(
            sa.Column(
                "scoring_pathway",
                sa.VARCHAR(length=20),
                nullable=True,
                comment="Which pathway was selected: excellence, diversity, or none",
            )
        )
        batch_op.add_column(
            sa.Column(
                "pathway_details",
                postgresql.JSONB(astext_type=sa.Text()),
                nullable=True,
                comment="Detailed breakdown of pathway calculation",
            )
        )
        batch_op.add_column(
            sa.Column(
                "incentive",
                sa.Float(),
                nullable=True,
                comment="Final incentive value from chain consensus",
            )
        )
        batch_op.add_column(
            sa.Column(
                "consensus_rank",
                sa.Integer(),
                nullable=True,
                comment="Miner rank based on final incentive values",
            )
        )
        batch_op.add_column(
            sa.Column(
                "weight_submission_block",
                sa.BigInteger(),
                nullable=True,
                comment="Block number when weights were submitted",
            )
        )
        batch_op.add_column(
            sa.Column(
                "consensus_block",
                sa.BigInteger(),
                nullable=True,
                comment="Block number when consensus was calculated",
            )
        )
        batch_op.add_column(
            sa.Column(
                "weather_weight_contribution",
                sa.Float(),
                nullable=True,
                comment="Contribution of weather task to final weight",
            )
        )
        batch_op.add_column(
            sa.Column(
                "geomagnetic_weight_contribution",
                sa.Float(),
                nullable=True,
                comment="Contribution of geomagnetic task to final weight",
            )
        )
        batch_op.add_column(
            sa.Column(
                "soil_weight_contribution",
                sa.Float(),
                nullable=True,
                comment="Contribution of soil moisture task to final weight",
            )
        )
        batch_op.add_column(
            sa.Column(
                "multi_task_bonus",
                sa.Float(),
                nullable=True,
                comment="Bonus for performing multiple tasks well",
            )
        )
        batch_op.add_column(
            sa.Column(
                "percentile_rank_weather",
                sa.Float(),
                nullable=True,
                comment="Percentile rank in weather forecasting (0-100)",
            )
        )
        batch_op.add_column(
            sa.Column(
                "percentile_rank_geomagnetic",
                sa.Float(),
                nullable=True,
                comment="Percentile rank in geomagnetic predictions (0-100)",
            )
        )
        batch_op.add_column(
            sa.Column(
                "percentile_rank_soil",
                sa.Float(),
                nullable=True,
                comment="Percentile rank in soil moisture predictions (0-100)",
            )
        )
        batch_op.add_column(
            sa.Column(
                "excellence_qualified_tasks",
                postgresql.ARRAY(sa.Text()),
                nullable=True,
                comment="Array of tasks where miner qualified for excellence pathway",
            )
        )
        batch_op.add_column(
            sa.Column(
                "validator_hotkey",
                sa.Text(),
                nullable=True,
                comment="Which validator calculated these stats",
            )
        )
        batch_op.create_index(
            "idx_mps_chain_integration",
            ["weight_submission_block", "consensus_block"],
            unique=False,
            postgresql_where=sa.text("weight_submission_block IS NOT NULL"),
        )
        batch_op.create_index(
            "idx_mps_consensus_rank",
            ["consensus_rank", "period_type"],
            unique=False,
            postgresql_where=sa.text("consensus_rank IS NOT NULL"),
        )
        batch_op.create_index(
            "idx_mps_incentive",
            [sa.literal_column("incentive DESC")],
            unique=False,
            postgresql_where=sa.text("incentive IS NOT NULL"),
        )
        batch_op.create_index(
            "idx_mps_pathway_performance",
            [
                "scoring_pathway",
                sa.literal_column("submitted_weight DESC"),
                "period_type",
            ],
            unique=False,
        )
        batch_op.create_index(
            "idx_mps_scoring_pathway", ["scoring_pathway", "period_type"], unique=False
        )
        batch_op.create_index(
            "idx_mps_submitted_weight",
            [sa.literal_column("submitted_weight DESC")],
            unique=False,
            postgresql_where=sa.text("submitted_weight IS NOT NULL"),
        )
        batch_op.create_index(
            "idx_mps_validator_hotkey",
            ["validator_hotkey", sa.literal_column("period_start DESC")],
            unique=False,
        )
        batch_op.create_index(
            "idx_mps_weight_submission_block",
            [sa.literal_column("weight_submission_block DESC")],
            unique=False,
            postgresql_where=sa.text("weight_submission_block IS NOT NULL"),
        )
        batch_op.create_check_constraint(
            "chk_scoring_pathway",
            "scoring_pathway IN ('excellence', 'diversity', 'none') OR scoring_pathway IS NULL",
        )
        batch_op.create_check_constraint(
            "chk_percentile_ranges",
            "(percentile_rank_weather IS NULL OR (percentile_rank_weather >= 0 AND percentile_rank_weather <= 100)) AND "
            "(percentile_rank_geomagnetic IS NULL OR (percentile_rank_geomagnetic >= 0 AND percentile_rank_geomagnetic <= 100)) AND "
            "(percentile_rank_soil IS NULL OR (percentile_rank_soil >= 0 AND percentile_rank_soil <= 100))",
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("miner_performance_stats", schema=None) as batch_op:
        batch_op.drop_constraint("chk_percentile_ranges", type_="check")
        batch_op.drop_constraint("chk_scoring_pathway", type_="check")
        batch_op.drop_index(
            "idx_mps_weight_submission_block",
            postgresql_where=sa.text("weight_submission_block IS NOT NULL"),
        )
        batch_op.drop_index("idx_mps_validator_hotkey")
        batch_op.drop_index(
            "idx_mps_submitted_weight",
            postgresql_where=sa.text("submitted_weight IS NOT NULL"),
        )
        batch_op.drop_index("idx_mps_scoring_pathway")
        batch_op.drop_index("idx_mps_pathway_performance")
        batch_op.drop_index(
            "idx_mps_incentive", postgresql_where=sa.text("incentive IS NOT NULL")
        )
        batch_op.drop_index(
            "idx_mps_consensus_rank",
            postgresql_where=sa.text("consensus_rank IS NOT NULL"),
        )
        batch_op.drop_index(
            "idx_mps_chain_integration",
            postgresql_where=sa.text("weight_submission_block IS NOT NULL"),
        )
        batch_op.drop_column("validator_hotkey")
        batch_op.drop_column("excellence_qualified_tasks")
        batch_op.drop_column("percentile_rank_soil")
        batch_op.drop_column("percentile_rank_geomagnetic")
        batch_op.drop_column("percentile_rank_weather")
        batch_op.drop_column("multi_task_bonus")
        batch_op.drop_column("soil_weight_contribution")
        batch_op.drop_column("geomagnetic_weight_contribution")
        batch_op.drop_column("weather_weight_contribution")
        batch_op.drop_column("consensus_block")
        batch_op.drop_column("weight_submission_block")
        batch_op.drop_column("consensus_rank")
        batch_op.drop_column("incentive")
        batch_op.drop_column("pathway_details")
        batch_op.drop_column("scoring_pathway")
        batch_op.drop_column("diversity_weight")
        batch_op.drop_column("excellence_weight")
        batch_op.drop_column("raw_calculated_weight")
        batch_op.drop_column("submitted_weight")

    # ### end Alembic commands ###
