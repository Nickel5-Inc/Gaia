"""add weather_forecast_steps table

Revision ID: 803c6cff9b58
Revises: 0f9fe00f6e93
Create Date: 2025-08-12 20:09:17.764580

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '803c6cff9b58'
down_revision: Union[str, None] = '0f9fe00f6e93'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('weather_forecast_steps',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('run_id', sa.Integer(), nullable=False),
    sa.Column('miner_uid', sa.Integer(), nullable=False),
    sa.Column('miner_hotkey', sa.VARCHAR(length=255), nullable=False),
    sa.Column('step_name', sa.VARCHAR(length=32), nullable=False),
    sa.Column('substep', sa.VARCHAR(length=64), nullable=True),
    sa.Column('lead_hours', sa.Integer(), nullable=True),
    sa.Column('status', sa.VARCHAR(length=32), nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('retry_count', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('next_retry_time', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('latency_ms', sa.Integer(), nullable=True),
    sa.Column('error_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['miner_uid'], ['node_table.uid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['run_id'], ['weather_forecast_runs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('run_id', 'miner_uid', 'step_name', 'substep', 'lead_hours', name='uq_wfsteps_run_miner_step_sub_lead'),
    comment='Event log of step/sub-step progress, retries, and errors per miner per run'
    )
    with op.batch_alter_table('weather_forecast_steps', schema=None) as batch_op:
        batch_op.create_index('idx_wfsteps_next_retry', ['next_retry_time'], unique=False)
        batch_op.create_index('idx_wfsteps_run_miner', ['run_id', 'miner_uid'], unique=False)
        batch_op.create_index('idx_wfsteps_step_status', ['step_name', 'status'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('weather_forecast_steps', schema=None) as batch_op:
        batch_op.drop_index('idx_wfsteps_step_status')
        batch_op.drop_index('idx_wfsteps_run_miner')
        batch_op.drop_index('idx_wfsteps_next_retry')

    op.drop_table('weather_forecast_steps')
    # ### end Alembic commands ###
